{
  "hash": "a420f995b87181de73275997360e6b80",
  "result": {
    "markdown": "---\nformat:\n  revealjs: \n    theme: [default, custom.css, styles.scss]\n    filters:\n      - reveal-auto-agenda\n      - lightbox\n    auto-agenda:\n      bullets: numbered\n      heading: Agenda\n    transition: fade\n    background-transition: fade\n    highlight-style: pygments\n    footer: \"https://mskyttner.github.io/quarto-intro/\"\n---\n\n\n\n##  {.title}\n\n::: r-fit-text\nIntro to [Quarto]{.flow}\n:::\n\n::: {style=\"font-size: 80px\"}\nMarkus Skyttner\n:::\n\n::: notes\nThis slides are introducing quarto - tools for authoring documents, books, websites in various formats.\n:::\n\n# Introduction {.r-stretch}\n\n## Quarto in 100 seconds {.r-stretch}\n\n\n\n{{< youtube _20US068pzk >}}\n\n\n\n\n\n::: aside\nSource: xvzf on YouTube\n:::\n\n## Instructions {.small}\n\nChallenge/Lab/Workshop: \n\n> In groups of two - create a quarto document and show it at the end of the session. Pick a format (web site, standalone HTML document, web slides or similar) and choose suitable data / content in the group.\n\n. . .\n\n::: callout-tip\n## Workshop Prep\n\nTo follow along with the exercises, please be sure that you:\n\n-   Are on the latest version of RStudio (or editor of choice)\n-   Or, have a posit.cloud account\n:::\n\n## Supporting materials\n\n::: incremental\n-   Slides: <https://mskyttner.github.io/quarto-intro/>\n-   Session repo with instructions: <https://github.com/mskyttner/quarto-intro>\n-   Example: <https://github.com/mskyttner/hello-quarto>\n-   Published at GitHub Pages here: <https://mskyttner.github.io/hello-quarto\n:::\n\n# About [Quarto]{.flow} {.r-stretch}\n\n## What is Quarto®? {auto-animate=\"true\"}\n\n<center>\n\nQuarto® is an\n\n::: {.fragment .grow .semi-fade-out}\nopen-source\n:::\n\n::: {.fragment .grow .semi-fade-out}\nscientific and technical\n:::\n\n::: {.fragment .grow .semi-fade-out}\npublishing system\n:::\n\n::: {.fragment .grow .semi-fade-out}\nbuilt on Pandoc.\n:::\n\n</center>\n\n::: notes\nQuarto is an open-source scientific and technical publishing system built on Pandoc. Let's break this down: Open-source: tools used for research and science that are free and open. Free software means more reproducibility, widespread sharing of knowledge and techniques, and elimination of cost barriers. You can also see the source code and contribute, too. Scientific and technical: Scientific and technical means that Quarto has specific things for journal articles or scientific papers, like support for code execution, citations, footnotes, scientific markdown, equations, citations, crossrefs etc. We'll be showing some of these later on, but Quarto definitely has the scientific publishing audience in mind. Publishing system: Quarto is a tool for writing dynamic documents that combine code, output, and text. It can embed output from Python, R, Julia, and Observable. Quarto can be rendered to create high-quality articles, reports, presentations, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more formats. Pandoc is the tool working behind the scenes to change Quarto documents to their finalized format. Quarto documents are authored with markdown, which is a plain text format. But Pandoc markdown is very rich and lets you control your document in very specific ways while being easy to read and write. We'll cover this as well.\n:::\n\n## Quarto Origins\n\n::: incremental\n-   Open source project sponsored by RStudio, PBC, now <https://posit.co>\n-   10 years of experience with R Markdown\n-   But there are a lot of other programming languages...\n:::\n\n. . .\n\nCan we reimplement R Markdown such that it's not tied to R?\n\n::: aside\nCheck out [JJ Allaire's R Medicine Keynote](https://www.youtube.com/watch?v=9jGc0TxoRco)!\n:::\n\n::: notes\nQuarto is a tool that you can call from the terminal or command line, and is independent from the computational systems. Quarto supports knitr, and can support others. So, you can think of Quarto as the next generation R Markdown that is fundamentally multilanguage and multiengine.\n:::\n\n## Quarto Goals\n\n::: incremental\n-   Create computational documents that hold source code for automation and reproducibility\n-   Reduce how difficult it is to make a scientific document\n-   Enable \"single-source publishing\" --- create Word, PDFs, HTML, etc. from one source\n:::\n\n::: aside\nCheck out [JJ Allaire's R Medicine Keynote](https://www.youtube.com/watch?v=9jGc0TxoRco)!\n:::\n\n::: notes\nSo the goals are to create these dynamic documents that can be reproducible and automated. For single-source publishing, you often need to create all sorts of output, like things that are printed, on the web, on the mobile. The idea is to being able to make publications from one source.\n:::\n\n## A new tool for literate programming\n\n::: columns\n::: {.column width=\"{50%\\\"\"}\n::: {.fragment .fade-in}\n![](images/rstudio-hello.png)\n:::\n:::\n\n::: {.column width=\"{50%\\\"\"}\n::: {.fragment .fade-in}\n![](images/lit-program-tools.png){height=\"600px\"}\n:::\n:::\n:::\n\n::: aside\nCheck out [JJ Allaire's R Medicine Keynote](https://www.youtube.com/watch?v=9jGc0TxoRco)!\n:::\n\n::: notes\nQuarto sits inside the big and broad literate programming world, which mixes narrative in text form with code for formatted outputs like documents and webpages and more. \\[click\\] There are lots of literate programming systems that support computation, like R Markdown, Org Mode, Jupyter Book, and now there is Quarto!\n:::\n\n## Why a new system?\n\n::: incremental\n-   At its core, Quarto is multilingual and independent of computational systems\n-   Has expanded upon R Markdown to add new languages and can add more in the future\n:::\n\n. . .\n\nLet's bring R Markdown to everybody!\n\n## Quarto Formats\n\n::: panel-tabset\n### Websites\n\n![nbdev.fast.ai](images/website.png){height=\"400\"}\n\n### Books\n\n![Python for Data Analysis, 3E by Wes McKinney](images/book.png){height=\"400\"}\n\n### Blogs\n\n![https://jollydata.blog/](images/blog.png){height=\"400\"}\n\n### Presentations\n\n![The untold story of palmerpenguins by Dr. Kristen Gorman, Dr. Allison Horst, and<br>Dr. Alison Hill](images/presentation.png){height=\"400\"}\n\n### Journals\n\n![Journal of Statistical Software (JSS)](https://user-images.githubusercontent.com/163582/42351114-e5deaa1c-8078-11e8-90de-2aff57bba255.png){height=\"400\"}\n:::\n\n::: notes\nQuarto can make very flexible websites, or books which are a a Quarto website that can be rendered to Word, ePub, etc., blogs with listings and posts and RSS feeds, Quarto has deep feature set for presentations with reveal.js optimized for scientific content, and of course, publishing for journals. There is custom format systems and the ability to flexibly adapt LaTeX templates.\n:::\n\n## Quarto Engines\n\n### knitr\n\n![](images/knitr-engine.png)\n\n::: notes\nAn engine is the tool that runs code. This is the underlying structure that creates documents from the source, the Quarto markdown file or the QMD file. When we render a Quarto document, first, the knitr engine executes all of the code chunks and generates an intermediary markdown file that includes both the code and code output. Then that markdown file is processed by pandoc to create the finished document. Since Quarto uses knitr, most Rmd files can be used unmodified.\n:::\n\n------------------------------------------------------------------------\n\n## knitr {.small}\n\n::: columns\n::: {.column width=\"50%\"}\n    ---\n    title: \"ggplot2 demo\"\n    format: \n      html:\n        code-fold: true\n    ---\n\n    ## Meet Quarto\n\n    Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n    ```{{r}}\n    #| label: plot-penguins\n    #| echo: false\n    #| message: false\n    #| warning: false\n\n    library(tidyverse)\n    library(palmerpenguins)\n\n    ggplot(penguins, \n           aes(x = flipper_length_mm, y = bill_length_mm)) +\n      geom_point(aes(color = species, shape = species)) +\n      scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n      labs(\n        title = \"Flipper and bill length\",\n        subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n        x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n        color = \"Penguin species\", shape = \"Penguin species\"\n      ) +\n      theme_minimal()\n    ```\n:::\n\n::: {.column width=\"50%\"}\n![](images/knitr-plot.png)\n:::\n:::\n\n::: notes\nThis is a Quarto document with the extension .qmd (on the left) along with its rendered version as HTML (on the right). You could also choose to render it into other formats like PDF, MS Word, etc. This is the basic model for Quarto publishing---take a source document and render it to a variety of output formats.\n:::\n\n## Quarto Engines\n\n### Jupyter\n\n![](images/jupyter-engine.png)\n\n::: notes\nThe structure is similar for Jupyter, we just are running documents natively through the Jupyter engine. Like R Markdown, you can render Jupyter notebooks with Quarto, too. Jupyter will support any other language that has a Jupyter kernal, and right now, there's a lot of Quarto functionality for Python and Julia through Jupyter. But, this is part of the multilingualism that we discussed earlier, where you can keep adding languages if you swap out different engines. This also means you can have a shared syntax and format across languages, since the backend is the same.\n:::\n\n------------------------------------------------------------------------\n\n## Jupyter {.small}\n\n::: columns\n::: {.column width=\"50%\"}\n    ---\n    title: \"Palmer Penguins Demo\"\n    format: \n        html:\n            code-fold: true\n    jupyter: python3\n    ---\n\n    ## Meet Quarto\n\n    Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n    ```{{python}}\n    #| echo: false\n    #| message: false\n\n    import pandas as pd\n    import seaborn as sns \n    from palmerpenguins import load_penguins\n    sns.set_style('whitegrid')\n\n    penguins = load_penguins()\n\n    g = sns.lmplot(x=\"flipper_length_mm\",\n                   y=\"body_mass_g\",\n                   hue=\"species\",\n                   height=7,\n                   data=penguins,\n                   palette=['#FF8C00','#159090','#A034F0']);\n    g.set_xlabels('Flipper Length');\n    g.set_ylabels('Body Mass');\n    ```\n:::\n\n::: {.column width=\"50%\"}\n![](images/jupyter-plot.png)\n:::\n:::\n\n## Quarto Engines\n\n### Observable JS\n\n-   Native support for Observable JS\n-   Reactive runtime for interactive data analysis\n\n[Observable Demo](https://quarto.org/docs/computations/ojs.html#example){preview-link=\"true\"}\n\n::: notes\nQuarto has native support for Observable JS, a set of enhancements to vanilla JS. It has reactive runtime, so you can interactively work with data within your Quarto document. There are other options too, like htmlwidgets and Shiny for Python.\n:::\n\n## Why Quarto?\n\n### A unified ecosystem\n\n::: incremental\n-   R Markdown has a lot of packages doing lots of different things\n\n![](images/hexes.png)\n\n-   Quarto has a shared expression for core features\n:::\n\n![](images/quarto.png)\n\n::: notes\nSo this is all good and well, but you may be wondering should you switch to Quarto if you already have another tool that you really like, you may be wondering whether or not you should switch. Here are some considerations. Quarto has a shared expression for core features. If you used the packages from the R Markdown ecosystem, then you may have had to switch between different ways of doing the same thing. In Quarto, you have a shared core syntax that is the same across all formats. Things like tabset, code folding, cross references in the same way. Another example is that Quarto has a universal theming system based on SCSS for all HTML output where core variables defined by bslib and so it is compatible with Shiny, flexdashboard, and R Markdown themes. So, users can create very consistent and organized theming across content.\n:::\n\n## Why Quarto? {.scrollable}\n\n### New features\n\n-   Cross references\n-   Advanced layout\n-   Figure/layout panels\n-   Callouts\n-   Diagrams\n-   Extensions\n-   Interactivity\n-   YAML intelligence\n-   Publishing\n-   Conditional content\n-   Notebook filters\n\n::: notes\nR Markdown isn't going away but big new features will be in Quarto, things like YAML intelligence, figure panels, layouts, which we'll cover later in the session.\n:::\n\n## Why Quarto? {.small}\n\n### Lua-based extension system\n\n::: panel-tabset\n#### Shortcodes\n\n![nutshell shortcode by schochastics](https://github.com/schochastics/quarto-nutshell/raw/main/nutshell.gif){height=\"400\"}\n\n#### Journal\n\n![Journal of Statistical Software (JSS)](https://user-images.githubusercontent.com/163582/42351114-e5deaa1c-8078-11e8-90de-2aff57bba255.png){height=\"400\"}\n\n#### Formats\n\n![nes-revealjs format by EmilHvitfeldt](https://user-images.githubusercontent.com/14034784/187721198-04400c7a-4432-4c90-9344-f1cf938be3b1.gif){height=\"400\"}\n\n#### Revealjs\n\n![attribution Revealjs Extension](https://github.com/quarto-ext/attribution/raw/main/example.png){height=\"400\"}\n:::\n\n::: notes\nQuarto also supports extensions. Quarto extensions are written in Lua, meaning that they are not language specific. So, you can use the same extension in a Jupyter file or a knitr file. Shortcodes let you add content, like fontawesome icons that you have seen in this presentation, or videos from YouTube. Filters let you add new markdown syntax for extended features. And formats are custom formats. There are built in extensions and then community built ones, if you search for Awesome Quarto, there are a list of them there.\n:::\n\n# How to use [Quarto]{.flow} {.r-stretch}\n\n## Quarto Installation\n\n![](download-quarto.png)\n\n::: aside\nquarto.org\n:::\n\n::: notes\nWhen you download the Quarto CLI, though, that's all you need to run Quarto, so you can use just your Terminal or Command Line Interface for everything that we'll explore, but you will need to install the engines if you're going to run code with the CLI.\n:::\n\n## Quarto Tooling\n\n::: {layout-ncol=\"2\" align=\"center\"}\n![](https://quarto.org/docs/get-started/images/vscode-logo.png){width=\"160\"}\n\n![](https://quarto.org/docs/get-started/images/rstudio-logo.png){width=\"160\"}\n\n![](https://quarto.org/docs/get-started/images/jupyter-logo.png){width=\"160\"}\n\n![](https://quarto.org/docs/get-started/images/text-editor-logo.png){width=\"160\"}\n:::\n\n``` {.bash filename=\"Terminal\"}\nquarto render\n```\n\n::: notes\nPart of the multilingualism of Quarto is that you are not tied to one tool. Quarto is meant for collaboration either within data science teams or across data science teams. So if someone is familiar with Jupyter Lab, but someone else likes to work in RStudio, they can still work on the same Quarto documents without having to switch to one tool or the other.\n\nFor RStudio users, Quarto is bundled and preinstalled with v2022.07 and later. There are a lot of features that are built into RStudio for Quarto documents. We didn't want to limit Quarto enhancements to just RStudio. VS Code has an extension so you can YAML completion and linting and other features for writing Quarto documents, and you can preview documents in Jupyter Notebooks and Jupyter Labs.\n:::\n\n## Working in RStudio {.small}\n\n### Rendering\n\nUse the Render button (![](images/rstudio-render-button.png){width=\"25\" height=\"20\"}) in the RStudio IDE to render the file and preview the output with a single click or keyboard shortcut (<kbd>⇧</kbd><kbd>⌘</kbd><kbd>K</kbd>).\n\n![](images/rstudio-render.png)\n\nAutomatically render on save by checking the Render on Save option:\n\n![](images/rstudio-render-on-save.png)\n\n::: notes\nIn RStudio, you can use the Render button to render the file, or take it through that process of convering to markdown, pandoc processing, etc. and preview the output with a single click. If you're familiar with R Markdown, it is where the knit button would show for those document. If you prefer to automatically render whenever you save, you can check the Render on Save option on the editor toolbar. The preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF outputs.\n:::\n\n------------------------------------------------------------------------\n\n## YAML Intelligence {.small}\n\nYAML code completion is available for project files, YAML front matter, and executable cell options:\n\n![](images/rstudio-yaml-completion.png){width=\"400\"}\n\nIf you have incorrect YAML it will also be highlighted when documents are saved:\n\n![](images/rstudio-yaml-diagnostics.png){width=\"400\"}\n\n::: {style=\"color: #C04483\"}\nLet's try it!\n:::\n\n::: notes\nQuarto has YAML intelligence in RStudio and VS code. YAML intelligence means completion and diagnostics for errors, and its' available for project files, YAML front matter, and executable cell options. This makes it easy to write YAML and see what has gone wrong rather than getting error messages that are really hard to decipher.\n:::\n\n## Working with the RStudio Visual Editor {.small}\n\n![](images/rstudio-source-visual.png)\n\n. . .\n\n::: {style=\"color: #C04483\"}\nLet's try it!\n:::\n\n::: notes\nRStudio has two options for editing documents: visual (on the left) and source (on the right). RStudio's visual editor offers an WYSIWYM authoring experience for markdown. So formatting (e.g. bolding text) you can use the toolbar, a keyboard shortcut (⌘B), or the markdown construct (**bold**). The plain text source code underlying the document is written for you and you can view/edit it at any point by switching to source mode for editing. You can toggle back and forth these two modes by clicking on Source and Visual in the editor toolbar (or using the keyboard shortcut ⌘⇧ F4).\n:::\n\n## Contents of a Quarto Document\n\n::: {layout-ncol=\"3\"}\n![](images/yaml.png)\n\n![](images/code-chunks.png)\n\n![](images/markdown-text.png)\n:::\n\n::: notes\nA Quarto document contains three types of content: a YAML header, code chunks, and markdown text.\n:::\n\n## YAML {.small}\n\n::: {layout-ncol=\"2\"}\n![](images/yaml.png)\n\n-   \"Yet another markup language\"\n-   Metadata of your document\n-   Demarcated by three dashes (`---`) on either end\n-   Uses key-value pairs in the format `key: value`\n:::\n\n::: notes\nQuarto documents usually start with an (optional) YAML header demarcated by three dashes on either end. The basic syntax of YAML uses key-value pairs in the format key: value. It controls the output of the document and contain metadata for your document, like title and author.\n:::\n\n## YAML {.small auto-animate=\"true\"}\n\n``` yaml\n---\ntitle: \"Penguins, meet Quarto!\"\nformat: html\neditor: visual\n---\n```\n\n::: notes\nOther YAML fields commonly found in headers of documents include metadata like author, subtitle, date as well as customization options like theme, fontcolor, fig-width, etc.\n:::\n\n## YAML {.small auto-animate=\"true\"}\n\n``` yaml\n---\ntitle: \"Penguins, meet Quarto!\"\nsubtitle: \"Intro to Quarto Exercise\"\nformat: html\neditor: visual\n---\n```\n\n. . .\n\n::: {style=\"color: #9054FF\"}\nLet's try it!\n:::\n\n[All YAML fields for HTML documents](https://quarto.org/docs/reference/formats/html.html){preview-link=\"true\"}\n\n## Code Chunks {.small}\n\n::: {layout-ncol=\"2\"}\n![](images/code-chunks.png)\n\n-   Code chunks begin and end with three backticks (usually)\n-   Code chunks are identified with a programming language in between `{}`\n-   Can include optional chunk options, in YAML style, identified by `#|` at the beginning of the line\n:::\n\n::: notes\nCode chunks are identified with three backticks, the language in curly brackets, and can have optional chunk options identified by the hashpipe at the beginning of the line within the chunk.\n:::\n\n## Code Chunks {.small auto-animate=\"true\"}\n\n```` markdown\n```{{r, label=\"plot-penguins\", warning=FALSE, echo=FALSE}}\nggplot(penguins, \n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(\n    title = \"Flipper and bill length\",\n    subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n    x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n    color = \"Penguin species\", shape = \"Penguin species\"\n  ) +\n  theme_minimal()\n```\n````\n\n## Code Chunks {.small auto-animate=\"true\"}\n\n```` markdown\n```{{r}}\n#| label: plot-penguins\n#| warning: false\n#| echo: false\n\nggplot(penguins, \n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(\n    title = \"Flipper and bill length\",\n    subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n    x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n    color = \"Penguin species\", shape = \"Penguin species\"\n  ) +\n  theme_minimal()\n```\n````\n\n## Code Chunks {.small auto-animate=\"true\"}\n\n```` markdown\n```{{r}}\n#| label: plot-penguins\n#| warning: false\n#| echo: false\n#| fig.alt: \"Scatterplot with flipper length in millimeters on\n#|  the x-axis, bill length in millimeters on the y-axis, colored\n#|  by species, showing a slightly positive relationship with\n#|  Chinstrap penguins having higher bill length but lower body\n#|  mass, Adelie with low bill length and low body mass, and\n#|  Gentoo with high body mass and high bill length.\"\n\nggplot(penguins, \n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(\n    title = \"Flipper and bill length\",\n    subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n    x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n    color = \"Penguin species\", shape = \"Penguin species\"\n  ) +\n  theme_minimal()\n```\n````\n\n::: notes\nThe new hashpipe allows for consistency across Jupyter and knitr.\n:::\n\n## Code Chunks {.small}\n\n![](images/rstudio-inline-output.png)\n\n::: {style=\"color: #039FA5\"}\nLet's try it!\n:::\n\n::: notes\nIn addition to rendering the complete document to view the results of code chunks you can also run each code chunk interactively in the RStudio editor by clicking the icon or keyboard shortcut (⇧⌘⏎). RStudio executes the code and displays the results either inline within your file or in the Console, depending on your preference.\n:::\n\n## Code Chunks {.small}\n\n### Cross referencing\n\n```` markdown\n```{{r}}\n#| label: fig-penguins\n#| warning: false\n\nggplot(penguins,\n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  labs(\n    title = \"Flipper and bill length\",\n    subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n    x = \"Flipper length (mm)\",\n    y = \"Bill length (mm)\",\n    color = \"Penguin species\",\n    shape = \"Penguin species\"\n  ) +\n  theme_minimal()\n```\n````\n\n```\nSee @fig-penguins.\n```\n\n## Code Chunks\n\n### Cross referencing\n\n![](images/cross-ref.png){fig-align=\"center\"}\n\n## Multiple Figures\n\nPut two plots side by side:\n\n    ```{{r}}\n    #| layout-ncol: 2\n    #| warning: false\n\n    ggplot(penguins, \n           aes(x = flipper_length_mm, y = bill_length_mm)) +\n      geom_point(aes(color = species, shape = species))\n\n    ggplot(data = penguins, aes(x = flipper_length_mm)) +\n      geom_histogram(aes(fill = species), \n                     alpha = 0.5, \n                     position = \"identity\")\n\n    ```\n\n::: notes\nLet's add another plot to our chunk. Our goal is to display these plots side-by-side.\n:::\n\n## Multiple Figures\n\nPut two plots side by side:\n\n![](images/side-plots.png)\n\n## Multiple Figures\n\nPut two plots side by side:\n\n    ```{{r}}\n    #| layout: \"[[30, 70]]\"\n    #| warning: false\n\n    ggplot(penguins, \n           aes(x = flipper_length_mm, y = bill_length_mm)) +\n      geom_point(aes(color = species, shape = species))\n\n    ggplot(data = penguins, aes(x = flipper_length_mm)) +\n      geom_histogram(aes(fill = species), \n                     alpha = 0.5, \n                     position = \"identity\")\n\n    ```\n\n## Code Options for All Chunks {.small}\n\nUse the YAML to control options for all code chunks.\n\nHide all of the code and just show the output by specifying `echo: false` within the `execute` option in the YAML.\n\n### Echo\n\n::: {layout-ncol=\"2\"}\n### One chunk\n\n    ```{{r}}\n    #| label: plot-penguins\n    #| echo: false\n\n    ggplot(penguins, \n           aes(x = flipper_length_mm, y = bill_length_mm)) +\n      geom_point(aes(color = species, shape = species)) +\n      scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n      labs(\n        title = \"Flipper and bill length\",\n        subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n        x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n        color = \"Penguin species\", shape = \"Penguin species\"\n      ) +\n      theme_minimal()\n    ```\n\n### All chunks\n\n``` {{yaml}}\n---\ntitle: \"Hello, Quarto!\"\nformat: html\neditor: visual\nexecute:\n  echo: false\n---\n```\n:::\n\n## Code Options for All Chunks {.small}\n\n### Code Folding\n\n``` {{yaml}}\n---\ntitle: \"Hello, Quarto!\"\nformat:\n  html:\n    code-fold: true\n---\n```\n\n### Code Tools\n\n``` {{yaml}}\n---\ntitle: \"Hello, Quarto!\"\nformat:\n  html:\n    code-tools:\n      source: https://quarto.org\n---\n```\n\n## Code Options for All Chunks {.small}\n\n### Code Linking\n\n**Needs downlit package**\n\n:::{layout-ncol=2}\n\n``` {{yaml}}\n---\ntitle: \"Hello, Quarto!\"\nformat:\n  html:\n    code-link: true\n---\n```\n\n![](images/rstudio-code-link-preview.png)\n::::\n\n::: notes\nYou might want to fold it and allow readers to view it at their discretion. You can do this via the code-fold option. Remove the echo option we previously added and add the code-fold HTML format option.\n:::\n\n## Markdown Text {.small}\n\n::: {layout-ncol=\"2\"}\n![](images/markdown-text.png)\n\n-   Markdown is a lightweight language for creating formatted text\n-   Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax\n:::\n\n::: notes\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. Quarto uses markdown syntax for text.\n:::\n\n## Markdown Text {.small}\n\n\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\nThe `penguins` data from the [**palmerpenguins**](https://allisonhorst.github.io/palmerpenguins \"palmerpenguins R package\") package contains size measurements for &#96;r nrow(penguins)&#96; penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.\n</code>\n</pre>\n</div>\n```\n\n\nThe `penguins` data from the [**palmerpenguins**](https://allisonhorst.github.io/palmerpenguins \"palmerpenguins R package\") package contains size measurements for 344 penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.\n\n::: notes\nIf using the visual editor, you won't need to learn much markdown syntax for authoring your document as you can use the menus and shortcuts to add a header, bold text, insert a table, etc. If using the source editor, you can achieve these with markdown expressions like ##, **bold**, etc.\n:::\n\n------------------------------------------------------------------------\n\n### Markdown Text\n\n### Formatting\n\n+-----------------------------------+-------------------------------+\n| Markdown Syntax                   | Output                        |\n+===================================+===============================+\n|     *italics* and **bold**        | *italics* and **bold**        |\n+-----------------------------------+-------------------------------+\n|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |\n+-----------------------------------+-------------------------------+\n|     ~~strikethrough~~             | ~~strikethrough~~             |\n+-----------------------------------+-------------------------------+\n|     `verbatim code`               | `verbatim code`               |\n+-----------------------------------+-------------------------------+\n\n------------------------------------------------------------------------\n\n### Markdown Text {.small .scrollable}\n\n### Images and Links\n\n+------------------------------------+---------------------------------+\n| Markdown Syntax                    | Output                          |\n+====================================+=================================+\n|     <https://quarto.org>           | <https://quarto.org>            |\n+------------------------------------+---------------------------------+\n|     [Quarto](https://quarto.org)   | [Quarto](https://quarto.org)    |\n+------------------------------------+---------------------------------+\n|     ![](penguin.jpg)               | ![](penguin.jpg)                |\n+------------------------------------+---------------------------------+\n\n::: aside\nPhoto by <a href=\"https://unsplash.com/@corneliusventures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Cornelius Ventures</a> on <a href=\"https://unsplash.com/s/photos/penguin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n:::\n\n## Markdown Text {.small auto-animate=\"true\"}\n\n### Tables\n\n``` {{markdown}}\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n```\n\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n\n## Markdown Text {.small auto-animate=\"true\"}\n\n### Tables\n\n``` {{markdown}}\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n\n: Table Column Widths {tbl-colwidths=\"[10,30,30,30]\"}\n```\n\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n\n: Table Column Widths {tbl-colwidths=\"\\[10,30,30,30\\]\"}\n\n. . .\n\n::: {style=\"color: #FF66C4\"}\nLet's try it!\n:::\n\n[Quarto guide for Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html){preview-link=\"true\"}\n\n## Quarto Authoring {.small}\n\n### Diagrams\n\nQuarto has native support for embedding Mermaid and Graphviz diagrams.\n\n\n\n```{mermaid}\n%%| fig-width: 6\n%%| echo: fenced\nflowchart LR\n  A[1] --> B(2)\n  B --> C{3}\n  C --> D[4]\n  C --> E[5]\n```\n\n\n\n::: notes\nThere is also native support for diagrams, where the syntax is similar as R or Python where the execution is being run by Quarto. This is a Mermaid diagram, which is a newer project supported on GitHub where you can use it in their documents as well, so it's a pretty handy tool to get to know.\n:::\n\n## Quarto Authoring\n\n### Equations\n\n``` {{markdown}}\n$$E = mc^{2}$$\n```\n\n$$E = mc^{2}$$\n\n## Quarto Authoring {.small}\n\n### Title Banners\n\n::: {layout-ncol=\"2\"}\n![](images/title-banner.png)\n\nHTML pages rendered with Quarto include a formatted title banner at the start of the article.\n:::\n\n## Title Banners {auto-animate=\"true\"}\n\n``` yaml\n---\ntitle: \"Penguins, meet Quarto!\"\nformat: html\neditor: visual\n---\n```\n\n. . .\n\nToggle on...\n\n## Title Banners {auto-animate=\"true\"}\n\n``` yaml\n---\ntitle: \"Penguins, meet Quarto!\"\ntitle-block-banner: true\nformat: html\neditor: visual\n---\n```\n\n## Title Banners {auto-animate=\"true\"}\n\nUse a color...\n\n``` yaml\n---\ntitle: \"Penguins, meet Quarto!\"\ntitle-block-banner: \"#FDA172\"\nformat: html\neditor: visual\n---\n```\n\n## Title Banners {auto-animate=\"true\"}\n\nOr a photo!\n\n``` yaml\n---\ntitle: \"Penguins, meet Quarto!\"\ntitle-block-banner: \"banner-image.jpg\"\nformat: html\neditor: visual\n---\n```\n\n. . .\n\n::: {style=\"color: #C04483\"}\nLet's try it!\n:::\n\n[All title block metadata](https://quarto.org/docs/authoring/title-blocks.html#metadata-labels){preview-links=\"true\"}\n\n## Divs and Spans\n\nYou can add classes, attributes, and other identifiers to content using Divs and Spans.\n\n### Divs\n\n    ::: {.border}\n    This content can be styled with a border\n    :::\n\n### Spans\n\n    [This is *some text*]{.class key=\"val\"}\n\n------------------------------------------------------------------------\n\n### Divs\n\n![](images/div.png)\n\n-   `:::` - Div start and end\n-   `#id` - label\n-   `.class` - behavior\n-   `attribute=value` - customization\n\n------------------------------------------------------------------------\n\n### Divs\n\n#### Callout Blocks\n\n``` markdown\n:::{.callout-tip}\n\nNote that there are five types of callouts, including: \n`note`, `tip`, `warning`, `caution`, and `important`.\n\n:::\n```\n\n. . .\n\n::: callout-tip\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n::: notes\nPandoc and therefore Quarto can parse fenced Div blocks, which lets you modify the structure of your documents. You can add classes, attributes, and other identifiers to regions of content using Divs and Spans. You can think of divs as HTML divs but can be applied in PDFs or other formats like Word. Here is an example of a call out, which calls out special content for readers and you may have seen them in books or papers. Quarto has this for all different formats using Divs.\n:::\n\n------------------------------------------------------------------------\n\n### Divs\n\n#### Callout Blocks\n\n``` markdown\n::: {#call1 .callout-note appearance=\"simple\"}\n\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n\n:::\n```\n\n::: {#call1 .callout-note appearance=\"simple\"}\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n:::\n\n------------------------------------------------------------------------\n\n### Divs\n\n#### Callout Blocks\n\n::: callout-warning\n.callout-warning\n:::\n\n::: callout-caution\n.callout-caution\n:::\n\n::: callout-important\n.callout-important\n:::\n\n------------------------------------------------------------------------\n\n### Divs\n\n#### Multiple columns\n\n``` {{markdown}}\n::: {layout-ncol=2}\n\n![](penguin.jpg)\n\nPhoto by <a href=\"https://unsplash.com/@corneliusventures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Cornelius Ventures</a> on <a href=\"https://unsplash.com/s/photos/penguin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n:::\n```\n\n. . .\n\n::: {layout-ncol=\"2\"}\n![](penguin.jpg)\n\nPhoto by <a href=\"https://unsplash.com/@corneliusventures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Cornelius Ventures</a> on <a href=\"https://unsplash.com/s/photos/penguin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n:::\n\n------------------------------------------------------------------------\n\n### Divs\n\n#### Multiple columns\n\n``` {{markdown}}\n::: {layout=\"[[1,1], [1]]\"}\n![penguin 1](penguin.jpg)\n\n![penguin 2](penguin.jpg)\n\n![penguin 3](penguin.jpg)\n:::\n```\n<br>\n``` {{markdown}}\n::: {layout=\"[[70,30], [100]]\"}\n![penguin 1](penguin.jpg)\n\n![penguin 2](penguin.jpg)\n\n![penguin 3](penguin.jpg)\n:::\n```\n\n---\n\n### Divs\n\n#### Tabsets\n\n``` {{markdown}}\n::: {.panel-tabset group=\"language\"}\n## R\n\n`library(dplyr)`\n\n## Python\n\n`import pandas as pd`\n:::\n```\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n`library(dplyr)`\n\n## Python\n\n`import pandas as pd`\n:::\n\n------------------------------------------------------------------------\n\n### Spans\n\n![](images/span.png)\n\n-   `[]` and `{}` for span start and end\n-   `.class` - behavior\n-   `key=\"val\"` - customization\n\n::: notes\nYou can also apply styles to inline text by creating spans. Use square brackets to surround the text and curly bracketes for the style you would like.\n:::\n\n------------------------------------------------------------------------\n\n### Spans\n\n``` {{markdown}}\nThis is text that is [red]{style=\"color:red;\"}.\n```\n\n. . .\n\nThis is text that is [red]{style=\"color:red;\"}.\n\n------------------------------------------------------------------------\n\n### Spans\n\n``` {{markdown}}\n![](penguin.jpg){fig-alt=\"A photo of a penguin jumping\"}\n```\n\n![](penguin.jpg){fig-alt=\"A photo of a penguin jumping\"}\n\n``` {{markdown}}\n![](penguin.jpg){fig-alt=\"A photo of a penguin jumping\" width=100}\n```\n\n![](penguin.jpg){fig-alt=\"A photo of a penguin jumping\" width=\"100\"}\n\n## Other formats\n\nYou can create Revealjs presentations using the `revealjs` format.\n\n``` {{yaml}}\n---\ntitle: \"Penguins, meet Quarto!\"\nformat: revealjs\neditor: visual\n---\n```\n\n. . .\n\n::: {style=\"color: #C04483\"}\nLet's try it!\n:::\n\n## Revealjs\n\n### Code Line Numbers\n\n```` markdown\n```{{r}}\n#| echo: true\n#| eval: FALSE\n#| code-line-numbers: 3-4\n\nggplot(penguins, \n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n```\n````\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\nggplot(penguins, \n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n```\n:::\n\n\n\n::: notes\nMost of the core capabilities of Quarto HTML Code Blocks are available for Reveal slides, including code folding, code copy, and the ability to pick a custom syntax highlighting theme. Revealjs also has some functionality not available in documents, such as code-line-highlighting, which lets you highlight specific lines of code output or highlight distinct lines over a progression of steps.\n:::\n\n## Revealjs\n\n### Incremental\n\n``` {{markdown}}\n::: {.incremental}\n- Adelie\n- Chinstrap\n- Gentoo\n:::\n```\n\n::: incremental\n-   Adelie\n-   Chinstrap\n-   Gentoo\n:::\n\n[All about revealjs in Quarto](https://quarto.org/docs/presentations/revealjs/){preview-link=\"true\"}\n\n::: notes\nBy default number and bullet lists within slides are displayed all at once. You can override this globally using the incremental option.\n:::\n\n# Get Started with [Quarto]{.flow}\n\n## Create a new document\n\nTo create a new document in RStudio, go to **File** \\> **New File** \\> **Quarto Document**:\n\n![](images/new-doc.png){fig-align=\"center\"}\n\n::: notes\nA new document will be created with the following YAML. This document will be empty so it won't be terribly interesting.\n:::\n\n## Quarto Projects\n\nQuarto projects are directories that provide:\n\n::: incremental\n-   A way to render all or some of the files in a directory with a single command (e.g. `quarto render myproject`).\n-   A way to share YAML configuration across multiple documents.\n-   The ability to redirect output artifacts to another directory.\n-   The ability to freeze rendered output (i.e. don't re-execute documents unless they have changed).\n:::\n\n## Quarto Projects\n\n``` {{yaml}}\nproject:\n  output-dir: _output\n\ntoc: true\nnumber-sections: true\nbibliography: references.bib  \n  \nformat:\n  html:\n    css: styles.css\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\n```\n\n::: notes\nWithin a Quarto project, you can render all the files at once or specify specific ones to render. So, say you have a website and you want to change the theme throughout, rather than rendering individual pages you can do that all with one command in a project. Quarto projects also include a \\_quarto.yml configuration file so that every document in the project inherits the metadata in that file. So, if you think about a blog, you probably want all your posts to have the same theme. If you use the Quarto command for making a new blog, it will automatically be a project, and you can configure the theme for all pages in the \\_quarto.yml file.\n:::\n\n## Quarto Projects\n\n### Freeze\n\n``` {{yaml}}\nexecute:\n  freeze: true  # never re-render during project render\n```\n\n<br>\n\n``` {{yaml}}\nexecute:\n  freeze: auto  # re-render only when source changes\n```\n\n::: notes\nRendering a bunch of files can be quite time consuming depending on the computations required. The freeze option specifies if computational documents should never be re-rendered during a global project render, or only be re-rendered when their source file changes. Freeze can used when you have either a large number of collaborators or many computational documents created over a long period of time. In these cases, it can be challenging to fully re-execute every document when you render the site. This could be because some documents have environment-specific requirements or one of your teammates wrote something in Python, which you don't have installed. Using freeze ensures that you can always reproducibly render your site.\n:::\n\n# Styling [Quarto]{.flow}\n\n## HTML Theming {.scrollable}\n\nQuarto includes 25 themes from the [Bootswatch](https://bootswatch.com/) project:\n\n-   default\n-   cerulean\n-   cosmo\n-   cyborg\n-   darkly\n-   flatly\n-   journal\n-   litera\n-   lumen\n-   lux\n-   materia\n-   minty\n-   morph\n-   pulse\n-   quartz\n-   sandstone\n-   simplex\n-   sketchy\n-   slate\n-   solar\n-   spacelab\n-   superhero\n-   united\n-   vapor\n-   yeti\n-   zephyr\n\n## HTML Theming\n\nUse these themes under the `theme` option in the YAML:\n\n``` {{yaml}}\nformat:\n  html:\n    theme: flatly\n```\n\n::: {layout-ncol=\"2\"}\n![](images/theme-1.png){width=\"300\"}\n\n![](images/theme-2.png){width=\"300\"}\n:::\n\n## HTML Theming\n\nYou can do extensive additional customization using SASS theme files.\n\n-   Bootstrap defines over 1,400 variables that control fonts, colors, padding, borders, and much more!\n\n``` {{css}}\n/*-- scss:defaults --*/\n\n$body-bg: #CDEEFD;\n\n/*-- scss:rules --*/\nh1, h2, h3, h4, h5, h6 {\n  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);\n}\n```\n\n## HTML Theming\n\nProvide the custom theme under `theme`:\n\n``` {{yaml}}\ntheme:\n  - flatly\n  - custom.scss\n```\n\n. . .\n\n![](images/theme-3.png){width=\"300\"}\n\n## HTML Theming\n\nQuarto also allows you to use a dark and light theme.\n\n``` {{yaml}}\ntheme:\n  light: flatly\n  dark: darkly\n```\n\n::: {layout-ncol=\"2\"}\n![](images/theme-light.png){width=\"300\"}\n\n![](images/theme-dark.png){width=\"300\"}\n:::\n\n# Publishing [Quarto]{.flow}\n\n## Publishing options\n\nSince content rendered with Quarto uses standard formats (HTML, PDFs, MS Word, etc.) it can be published anywhere.\n\nSome options:\n\n-   Quarto Pub\n-   GitHub Pages\n-   RStudio Connect\n-   Netlify\n\n::: notes\nThere's an integrated quarto publish command that lets you publish in a bunch of places.\n:::\n\n## Quarto Pub {.small}\n\nQuarto Pub is a free publishing service for content created with Quarto.\n\n-   Must be publicly available\n-   Cannot be larger than 100 MB\n-   Has a soft limit of 10 GB a month\n\n``` {.bash filename=\"Terminal\"}\nquarto publish quarto-pub hello.qmd\n```\n\n<br>\n\n``` {.bash filename=\"Terminal\"}\n# token created at https://quartopub.com/profile/\nexport QUARTO_PUB_AUTH_TOKEN=\"qpa_k4yWKEmlu5wkvx173Ls\"\n\n# publish to quarto-pub site specified within _publish.yml\nquarto publish quarto-pub\n```\n\n. . .\n\n::: {style=\"color: #C04483\"}\nLet's try it!\n:::\n\n# Conclusion\n\n## Thank you!\n\n-   Read the [Quarto documentation](https://quarto.org/).\n-   Check out [Awesome Quarto](https://github.com/mcanouil/awesome-quarto).\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}